<?php

/**
 * @file
 * Implements gridstack plugin for drupal.
 */

/**
 * Implements hook_help().
 */
function gridstack_field_help($path, $arg) {
  switch ($path) {
    case 'admin/help#gridstack_field':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module implements Gridstack plugin as field. In this field we can configure which content types can be added and showed in this field. Than in field settings can be chosen settings for gridstack plugin. After this manipulations users on the site can create pages with themed grid of chosen nodes.</p>');
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Adding Gridstack field') . '</dt>';
      $output .= '<dd>' . t('Can be added on content type configuring page on Manage fields tab (admin/structure/types/manage/%/fields). For new field neet to choose field type property as "Gridstack field" and click save button.') . '</dd>';
      $output .= '<dt>' . t('Configuring field') . '</dt>';
      $output .= '<dd>' . t('Field can be configured on standart field edit page (admin/structure/types/manage/grid/fields/%field_name). On this page user can choose which content type can be added/displayed in our field.') . '</dd>';
      $output .= '<dt>' . t('Gridstack plugin configuration') . '</dt>';
      $output .= '<dd>' . t('Gridstack options can be configured on field sttings form (admin/structure/types/manage/grid/fields/%field_name), there are next parameters:');
      $output .= '<ul><li>' . t('Height - maximum rows amount. Default is 0 which means no maximum rows.') . '</li>';
      $output .= '<li>' . t('Width - amount of columns (default: 12).') . '</li>';
      $output .= '<li>' . t('Cell height -  one cell height (default: 60). Can be:') . '</li><ul>';
      $output .= '<li>' . t('an integer (px)') . '</li>';
      $output .= '<li>' . t('0 or null, in which case the library will not generate styles for rows. Everything must be defined in CSS files.') . '</li>';
      $output .= '<li>' . t('"auto" - height will be calculated from cell width.') . '</li></ul>';
      $output .= '<li>' . t('Min width - minimal width. If window width is less, grid will be shown in one-column mode. You need also update your css file (@media (max-width: 768px) {...}) with corresponding value (default: 768).') . '</li>';
      $output .= '<li>' . t('RTL - if true turns grid to RTL. Possible values are true, false, "auto" (default: "auto").') . '</li>';
      $output .= '<li>' . t('Vertical margin - vertical gap size (default: 20).') . '</li>';
      $output .= '<li>' . t('Animate - turns animation on (default: false).') . '</li>';
      $output .= '<li>' . t('Always show resize handle - if true the resizing handles are shown even if the user is not hovering over the widget (default: false).') . '</li>';
      $output .= '<li>' . t('Auto - if false gridstack will not initialize existing items (default: true).') . '</li>';
      $output .= '<li>' . t('Disable drag - disallows dragging of widgets (default: false).') . '</li>';
      $output .= '<li>' . t('Disable resize - disallows resizing of widgets (default: false).') . '</li>';
      $output .= '<li>' . t('float - enable floating widgets (default: false).') . '</li></ul>';
      $output .= '</dd></dl>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 *
 * Define menu items and page callbacks.
 */
function gridstack_field_menu() {
  $items = array();
  $items['gridstack_field/%node/%'] = array(
    'title' => 'Manager tips',
    'page callback' => 'gridstack_field_node_callback',
    'theme callback'   => 'ajax_base_page_theme',
    'access arguments' => array('access content'),
    'page arguments' => array(1),
  );
  $items['gridstack_field/%/autocomplete'] = array(
    'page callback' => 'gridstack_field_autocomplete_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
  );

  return $items;
}

/**
 * Implements hook_library().
 */
function gridstack_field_library() {
  // Default library path.
  // $path = libraries_get_path(NULL);
  $path = 'sites/all/libraries/';

  $module_path = drupal_get_path('module', 'gridstack_field');

  // It's gonna be just 'css' => []
  $a = array();

  $libraries['underscore'] = array(
    'title' => 'Underscore library',
    'website' => 'http://underscorejs.org/',
    'version' => '1.8.3',
    'css' => $a,
    'js' => array(
      $path . 'underscore/underscore-min.js' => array(
        'group' => JS_LIBRARY,
      ),
    ),
  );

  // Backbone library.
  $libraries['backbone'] = array(
    'title' => 'Backbone library',
    'website' => 'http://backbonejs.org/',
    'version' => '1.2.3',
    'css' => $a,
    'js' => array(
      $path . 'backbone/backbone-min.js' => array(
        'group' => JS_LIBRARY,
      ),
    ),
    'dependencies' => array(
      array('gridstack_field', 'underscore'),
    ),
  );

  // Gridtack plugin.
  $libraries['gridstack'] = array(
    'title' => 'Gridtack plugin',
    'website' => 'http://troolee.github.io/gridstack.js/',
    'version' => 1,
    'css' => array(
      $path . 'gridstack/gridstack.min.css' => array(
        'group' => JS_LIBRARY,
      ),
    ),
    'js' => array(
      $path . 'gridstack/gridstack.min.js' => array(
        'group' => JS_LIBRARY,
      ),
    ),
    'dependencies' => array(
      array('gridstack_field', 'backbone'),
    ),
  );

  $libraries['gridstack_field_lib'] = array(
    'title' => 'Gridstack field scripts and styles.',
    'version' => 1,
    'js' => array(
      $module_path . '/js/models/gridstack_field_models.js' => array(
        'group' => JS_LIBRARY,
      ),
      $module_path . '/js/collections/gridstack_field_collections.js' => array(
        'group' => JS_LIBRARY,
      ),
      $module_path . '/js/views/gridstack_field_views.js' => array(
        'group' => JS_LIBRARY,
      ),
      $module_path . '/js/gridstack_field.js' => array(
        'group' => JS_LIBRARY,
      ),
    ),
    'css' => array(
      $module_path . '/css/gridstack_field.css' => array(
        'group' => JS_LIBRARY,
      ),
    ),
  );
  $scripts = array('//code.jquery.com/ui/1.11.4/jquery-ui.js', '//code.jquery.com/jquery-1.12.3.js');
  foreach ($scripts as $script) {
    $libraries['gridstack_field_lib']['js'][$script] = array('type' => 'file', 'group' => JS_LIBRARY);
  }
  return $libraries;
}

/**
 * Alters js on pages.
 */
function gridstack_field_js_alter(&$javascript) {
  $path = '//code.jquery.com/jquery-1.12.3.js';
  $path_ui = '//code.jquery.com/ui/1.11.4/jquery-ui.js';
  if (!empty($javascript[$path])) {
    $javascript[$path]['weight'] = -20;
    $javascript[$path]['every_page'] = TRUE;
    $javascript[$path_ui]['weight'] = -15;
    $javascript[$path_ui]['every_page'] = TRUE;
    unset($javascript['misc/jquery.js']);
  }
  return $javascript;
}

/**
 * Implements hook_field_info().
 */
function gridstack_field_field_info() {
  return array(
    'gridstack_field' => array(
      'label' => t('Gridstack field'),
      'description' => t('Implements gridtack plugin'),
      'default_widget' => 'gridstack_field_widget',
      'default_formatter' => 'gridstack_field_formatter',
      'settings' => array(
        'height' => '0',
        'width' => '12',
        'cellHeight' => '60',
        'minWidth' => '768',
        'rtl' => 'auto',
        'verticalMargin' => '10',
        'animate' => 0,
        'alwaysShowResizeHandle' => 0,
        'auto' => 1,
        'disableDrag' => 0,
        'disableResize' => 0,
        'float' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function gridstack_field_field_widget_info() {
  return array(
    'gridstack_field' => array(
      'label' => t('Gridstack field'),
      'field types' => array('gridstack_field'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function gridstack_field_field_settings_form($field, $instance) {
  $defaults['row_setting'] = field_info_field_settings($field['type']);
  $settings = array_merge($defaults, $field['settings']);

  foreach (node_type_get_types() as $key => $type) {
    $form[$key] = array(
      '#type'  => 'checkbox',
      '#title' => check_plain($type->name),
      '#default_value' => !empty($settings[$key]) ? $settings[$key] : 0,
    );
    $displays = gridstack_field_get_displays($key);
    $form[$key . '_display'] = array(
      '#type'   => 'container',
      '#states' => array(
        'visible' => array(
          ':input[name="field[settings][' . $key . ']"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form[$key . '_display']['settings'] = array(
      '#type'    => 'radios',
      '#options' => $displays,
      '#default_value' => !empty($settings[$key . '_display']) ? $settings[$key . '_display']['settings'] : 0,
    );
  }

  // Settings for Gridstack plugin.
  $form['row_setting'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#title' => t('Row settings'),
  );
  $form['row_setting']['height'] = array(
    '#title' => t('Height'),
    '#type' => 'textfield',
    '#default_value' => $settings['row_setting']['height'],
    '#maxlength' => 60,
    '#size' => 60,
  );
  $form['row_setting']['width'] = array(
    '#title' => t('Width'),
    '#type' => 'textfield',
    '#default_value' => $settings['row_setting']['width'],
    '#maxlength' => 60,
    '#size' => 60,
  );
  $form['row_setting']['cellHeight'] = array(
    '#title' => t('Cell height'),
    '#type' => 'textfield',
    '#default_value' => $settings['row_setting']['cellHeight'],
    '#maxlength' => 60,
    '#size' => 60,
  );
  $form['row_setting']['minWidth'] = array(
    '#title' => t('Min width'),
    '#type' => 'textfield',
    '#default_value' => $settings['row_setting']['minWidth'],
    '#maxlength' => 60,
    '#size' => 60,
  );
  $form['row_setting']['rtl'] = array(
    '#title' => t('RTL'),
    '#type' => 'textfield',
    '#default_value' => $settings['row_setting']['rtl'],
    '#maxlength' => 60,
    '#size' => 60,
  );
  $form['row_setting']['verticalMargin'] = array(
    '#title' => t('Vertical margin'),
    '#type' => 'textfield',
    '#default_value' => $settings['row_setting']['verticalMargin'],
    '#maxlength' => 60,
    '#size' => 60,
  );
  $form['row_setting']['animate'] = array(
    '#type'  => 'checkbox',
    '#title' => t('Animate'),
    '#default_value' => $settings['row_setting']['animate'],
  );
  $form['row_setting']['alwaysShowResizeHandle'] = array(
    '#type'  => 'checkbox',
    '#title' => t('Always show resize handle'),
    '#default_value' => $settings['row_setting']['alwaysShowResizeHandle'],
  );
  $form['row_setting']['auto'] = array(
    '#type'  => 'checkbox',
    '#title' => t('Auto'),
    '#default_value' => $settings['row_setting']['auto'],
  );
  $form['row_setting']['disableDrag'] = array(
    '#type'  => 'checkbox',
    '#title' => t('Disable drag'),
    '#default_value' => $settings['row_setting']['disableDrag'],
  );
  $form['row_setting']['disableResize'] = array(
    '#type'  => 'checkbox',
    '#title' => t('Disable resize'),
    '#default_value' => $settings['row_setting']['disableResize'],
  );
  $form['row_setting']['float'] = array(
    '#type'  => 'checkbox',
    '#title' => t('float'),
    '#default_value' => $settings['row_setting']['float'],
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function gridstack_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'gridstack_field':
      // Converting options to boolean type for preventing issues with incorrect types.
      $options = gridstack_field_get_options('bool');
      foreach ($options as $option) {
        $field['settings']['row_setting'][$option] = (bool) $field['settings']['row_setting'][$option];
      }

      // Converting options to int type for preventing issues with incorrect types.
      $options = gridstack_field_get_options('int');
      foreach ($options as $option) {
        $field['settings']['row_setting'][$option] = intval($field['settings']['row_setting'][$option]);
      }
      // Pass settings into script.
      drupal_add_js(array('gridstack_field' => $field['settings']), array('type' => 'setting'));

      // Add Backbone, Underscore and Gridstack libraries.
      drupal_add_library('gridstack_field', 'gridstack', TRUE);
      drupal_add_library('gridstack_field', 'gridstack_field_lib', TRUE);

      $value = isset($items[$delta]['json']) ? $items[$delta]['json'] : '';
      $element['items'] = array(
        '#markup' => '<div class="gridstack-items"><div class="grid-stack"></div></div>',
      );
      $element['gridstack_group'] = array(
        '#type' => 'fieldset',
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
        '#title' => check_plain(isset($element['#title']) ? $element['#title'] : ''),
        '#description' => check_plain(isset($element['#description']) ? $element['#description'] : ''),
      );
      $element['gridstack_group']['add_item'] = array(
        '#type' => 'button',
        '#button_type' => 'button',
        '#value' => t('Add item'),
        '#executes_submit_callback' => FALSE,
      );
      $element['gridstack_group']['gridstack_autocomplete'] = array(
        '#type' => 'textfield',
        '#title' => t('Node'),
        '#maxlength' => 60,
        '#autocomplete_path' => 'gridstack_field/' . $field['field_name'] . '/autocomplete',
      );
      $element['json'] = array(
        '#type' => 'textfield',
        '#default_value' => $value,
        '#maxlength' => 2048,
        '#size' => 60,
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function gridstack_field_field_formatter_info() {
  return array(
    'gridstack_field_formatter' => array(
      'label' => t('Gridstack field'),
      'field types' => array('gridstack_field'),
      'settings'  => array(
        'height' => '0',
        'width' => '12',
        'cellHeight' => '60',
        'minWidth' => '768',
        'rtl' => 'auto',
        'verticalMargin' => '10',
        'animate' => 0,
        'alwaysShowResizeHandle' => 0,
        'auto' => 1,
        'disableDrag' => 0,
        'disableResize' => 0,
        'draggable' => 0,
        'float' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function gridstack_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Processing format types.
  switch ($display['type']) {
    case 'gridstack_field_formatter':
      foreach ($items as $delta => $item) {
        // If we have item then.
        if ($item['json']) {
          $formatted_text = $item['json'];
          // Show text with tags.
          $element[$delta]['#markup'] = $formatted_text;
        }

        // Converting options to boolean type for preventing issues with incorrect types.
        $options = gridstack_field_get_options('bool');
        foreach ($options as $option) {
          $field['settings']['row_setting'][$option] = (bool) $field['settings']['row_setting'][$option];
        }

        // Converting options to int type for preventing issues with incorrect types.
        $options = gridstack_field_get_options('int');
        foreach ($options as $option) {
          $field['settings']['row_setting'][$option] = intval($field['settings']['row_setting'][$option]);
        }

        // Pass settings into script.
        drupal_add_js(array('gridstack_field' => $field['settings']), array('type' => 'setting'));

        // Add Backbone, Underscore and Gridstack libraries.
        drupal_add_library('gridstack_field', 'gridstack', TRUE);
        drupal_add_library('gridstack_field', 'gridstack_field_lib', TRUE);
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function gridstack_field_field_is_empty($item, $field) {
  if (empty($item['json'])) {
    return TRUE;
  }
}

/**
 * Callback for loading nodes.
 */
function gridstack_field_node_callback($node, $display = 'teaser') {
  if ($node->status == 0) {
    drupal_add_http_header('Status', '404 Not Found');
    drupal_fast_404();
  }

  return print render(node_view($node, $display));
}

/**
 * Callback for autocomplete field.
 */
function gridstack_field_autocomplete_callback($field_name, $string) {
  // Using check functions on output to prevent cross site scripting attacks.
  $field_name = check_plain($field_name);
  $string = check_plain($string);

  $field = field_info_field($field_name);

  // Get array of content types from field settings.
  $type = array_filter($field['settings'], function ($v) {
    return $v === 1;
  });
  $type = array_keys($type);

  if (!empty($type)) {
    $matches = array();
    $res = db_select('node', 'n');
    $res->fields('n', array('title', 'nid', 'type'));
    $res->condition('title', '%' . db_like($string) . '%', 'LIKE');
    $res->condition('type', $type, 'IN');
    $res->range(0, 10);
    $query = $res->execute()->fetchAll();
    foreach ($query as $row) {
      $matches[$row->nid] = $row->title . '  [' . $row->type . ']';
    }
    // Return the result to the form in json.
    drupal_json_output($matches);
  }
}

/**
 * Get enables content types displays.
 */
function gridstack_field_get_displays($type) {
  $entity_info = entity_get_info('node');
  $view_modes = $entity_info['view modes'];
  $view_mode_settings = field_view_mode_settings('node', $type);
  $displays = array();
  foreach ($view_modes as $view_mode_name => $view_mode_info) {
    if (!empty($view_mode_settings[$view_mode_name]['custom_settings'])) {
      $displays[$view_mode_name] = $view_mode_info['label'];
    }
  }
  return $displays;
}

/**
 * Return array with keys of options for gridstack plugin separated by type.
 *
 * @param string $type
 *  Determine which type of options should be returned.
 *
 * @return array $options
 *  An array with options keys.
 */
function gridstack_field_get_options($type) {
  $options = array();

  switch ($type) {
    case 'bool':
      $options = array(
        'animate',
        'alwaysShowResizeHandle',
        'auto',
        'disableDrag',
        'disableResize',
        'float',
      );
      break;

    case 'int':
      $options = array(
        'height',
        'width',
        'cellHeight',
        'minWidth',
        'rtl',
        'verticalMargin',
      );
      break;

    default:
      break;
  }

  return $options;
}